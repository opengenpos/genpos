// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "softlocx6.h"

/////////////////////////////////////////////////////////////////////////////
// CSoftlocx6

IMPLEMENT_DYNCREATE(CSoftlocx6, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CSoftlocx6 properties

CString CSoftlocx6::GetLicenseName()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CSoftlocx6::SetLicenseName(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

CString CSoftlocx6::GetEncryptionKey()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CSoftlocx6::SetEncryptionKey(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

BOOL CSoftlocx6::GetPcUnique()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CSoftlocx6::SetPcUnique(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

BOOL CSoftlocx6::GetTransferLicense()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CSoftlocx6::SetTransferLicense(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

CString CSoftlocx6::GetStatus()
{
	CString result;
	GetProperty(0x5, VT_BSTR, (void*)&result);
	return result;
}

void CSoftlocx6::SetStatus(LPCTSTR propVal)
{
	SetProperty(0x5, VT_BSTR, propVal);
}

long CSoftlocx6::GetUsesleft()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CSoftlocx6::SetUsesleft(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

long CSoftlocx6::GetDaysleft()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CSoftlocx6::SetDaysleft(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

DATE CSoftlocx6::GetBestBeforeDate()
{
	DATE result;
	GetProperty(0x8, VT_DATE, (void*)&result);
	return result;
}

void CSoftlocx6::SetBestBeforeDate(DATE propVal)
{
	SetProperty(0x8, VT_DATE, propVal);
}

long CSoftlocx6::GetNetWorkLicenseCount()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CSoftlocx6::SetNetWorkLicenseCount(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

CString CSoftlocx6::GetNetWorkPath()
{
	CString result;
	GetProperty(0xa, VT_BSTR, (void*)&result);
	return result;
}

void CSoftlocx6::SetNetWorkPath(LPCTSTR propVal)
{
	SetProperty(0xa, VT_BSTR, propVal);
}

CString CSoftlocx6::GetHardCodedSerialNumber()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CSoftlocx6::SetHardCodedSerialNumber(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

BOOL CSoftlocx6::GetRunProtection()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}

void CSoftlocx6::SetRunProtection(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}

long CSoftlocx6::GetExpireValue()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CSoftlocx6::SetExpireValue(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

long CSoftlocx6::GetExpireType()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CSoftlocx6::SetExpireType(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

CString CSoftlocx6::GetSerialNumberType()
{
	CString result;
	GetProperty(0xf, VT_BSTR, (void*)&result);
	return result;
}

void CSoftlocx6::SetSerialNumberType(LPCTSTR propVal)
{
	SetProperty(0xf, VT_BSTR, propVal);
}

BOOL CSoftlocx6::GetStealthMode()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CSoftlocx6::SetStealthMode(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

BOOL CSoftlocx6::GetStealthOnReg()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CSoftlocx6::SetStealthOnReg(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

BOOL CSoftlocx6::GetAllowSLX()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}

void CSoftlocx6::SetAllowSLX(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}

CString CSoftlocx6::GetWebURL()
{
	CString result;
	GetProperty(0x13, VT_BSTR, (void*)&result);
	return result;
}

void CSoftlocx6::SetWebURL(LPCTSTR propVal)
{
	SetProperty(0x13, VT_BSTR, propVal);
}

CString CSoftlocx6::GetLevel1Title()
{
	CString result;
	GetProperty(0x14, VT_BSTR, (void*)&result);
	return result;
}

void CSoftlocx6::SetLevel1Title(LPCTSTR propVal)
{
	SetProperty(0x14, VT_BSTR, propVal);
}

CString CSoftlocx6::GetLevel2Title()
{
	CString result;
	GetProperty(0x15, VT_BSTR, (void*)&result);
	return result;
}

void CSoftlocx6::SetLevel2Title(LPCTSTR propVal)
{
	SetProperty(0x15, VT_BSTR, propVal);
}

CString CSoftlocx6::GetLevel3Title()
{
	CString result;
	GetProperty(0x16, VT_BSTR, (void*)&result);
	return result;
}

void CSoftlocx6::SetLevel3Title(LPCTSTR propVal)
{
	SetProperty(0x16, VT_BSTR, propVal);
}

BOOL CSoftlocx6::GetAutoReg()
{
	BOOL result;
	GetProperty(0x17, VT_BOOL, (void*)&result);
	return result;
}

void CSoftlocx6::SetAutoReg(BOOL propVal)
{
	SetProperty(0x17, VT_BOOL, propVal);
}

BOOL CSoftlocx6::GetUsingWeb()
{
	BOOL result;
	GetProperty(0x18, VT_BOOL, (void*)&result);
	return result;
}

void CSoftlocx6::SetUsingWeb(BOOL propVal)
{
	SetProperty(0x18, VT_BOOL, propVal);
}

CString CSoftlocx6::GetEvalSerial()
{
	CString result;
	GetProperty(0x19, VT_BSTR, (void*)&result);
	return result;
}

void CSoftlocx6::SetEvalSerial(LPCTSTR propVal)
{
	SetProperty(0x19, VT_BSTR, propVal);
}

CString CSoftlocx6::GetEvalCode()
{
	CString result;
	GetProperty(0x1a, VT_BSTR, (void*)&result);
	return result;
}

void CSoftlocx6::SetEvalCode(LPCTSTR propVal)
{
	SetProperty(0x1a, VT_BSTR, propVal);
}

long CSoftlocx6::GetNetworkPollTime()
{
	long result;
	GetProperty(0x1b, VT_I4, (void*)&result);
	return result;
}

void CSoftlocx6::SetNetworkPollTime(long propVal)
{
	SetProperty(0x1b, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CSoftlocx6 operations

void CSoftlocx6::License()
{
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CSoftlocx6::NetworkLic()
{
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CSoftlocx6::Register(LPCTSTR UnlockCode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UnlockCode);
	return result;
}

BOOL CSoftlocx6::Extend(LPCTSTR UnlockCode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UnlockCode);
	return result;
}

BOOL CSoftlocx6::Remove(LPCTSTR LicenseName, LPCTSTR EncryptionKey)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		LicenseName, EncryptionKey);
	return result;
}

CString CSoftlocx6::CreateUnlock(LPCTSTR serialNumber, LPCTSTR key, BOOL Extend, long unlocklevel)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL VTS_I4;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		serialNumber, key, Extend, unlocklevel);
	return result;
}

void CSoftlocx6::GetLicenseDetails()
{
	InvokeHelper(0x22, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CString CSoftlocx6::Transfer(LPCTSTR serialNumber)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		serialNumber);
	return result;
}

BOOL CSoftlocx6::CreateNetFile(LPCTSTR appName, LPCTSTR uncPath, long numLicenses, LPCTSTR destinationPath)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I4 VTS_BSTR;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		appName, uncPath, numLicenses, destinationPath);
	return result;
}

void CSoftlocx6::Purchase()
{
	InvokeHelper(0x25, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CSoftlocx6::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
