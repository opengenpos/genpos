#if !defined(AFX_SOFTLOCX6_H__45A38C80_AB4E_46DB_B8CB_2F21931A4F04__INCLUDED_)
#define AFX_SOFTLOCX6_H__45A38C80_AB4E_46DB_B8CB_2F21931A4F04__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CSoftlocx6 wrapper class

class CSoftlocx6 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CSoftlocx6)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xa61246c, 0x183e, 0x46a1, { 0xb5, 0x97, 0x81, 0xa2, 0x20, 0xd8, 0xf7, 0x45 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	CString GetLicenseName();
	void SetLicenseName(LPCTSTR);
	CString GetEncryptionKey();
	void SetEncryptionKey(LPCTSTR);
	BOOL GetPcUnique();
	void SetPcUnique(BOOL);
	BOOL GetTransferLicense();
	void SetTransferLicense(BOOL);
	CString GetStatus();
	void SetStatus(LPCTSTR);
	long GetUsesleft();
	void SetUsesleft(long);
	long GetDaysleft();
	void SetDaysleft(long);
	DATE GetBestBeforeDate();
	void SetBestBeforeDate(DATE);
	long GetNetWorkLicenseCount();
	void SetNetWorkLicenseCount(long);
	CString GetNetWorkPath();
	void SetNetWorkPath(LPCTSTR);
	CString GetHardCodedSerialNumber();
	void SetHardCodedSerialNumber(LPCTSTR);
	BOOL GetRunProtection();
	void SetRunProtection(BOOL);
	long GetExpireValue();
	void SetExpireValue(long);
	long GetExpireType();
	void SetExpireType(long);
	CString GetSerialNumberType();
	void SetSerialNumberType(LPCTSTR);
	BOOL GetStealthMode();
	void SetStealthMode(BOOL);
	BOOL GetStealthOnReg();
	void SetStealthOnReg(BOOL);
	BOOL GetAllowSLX();
	void SetAllowSLX(BOOL);
	CString GetWebURL();
	void SetWebURL(LPCTSTR);
	CString GetLevel1Title();
	void SetLevel1Title(LPCTSTR);
	CString GetLevel2Title();
	void SetLevel2Title(LPCTSTR);
	CString GetLevel3Title();
	void SetLevel3Title(LPCTSTR);
	BOOL GetAutoReg();
	void SetAutoReg(BOOL);
	BOOL GetUsingWeb();
	void SetUsingWeb(BOOL);
	CString GetEvalSerial();
	void SetEvalSerial(LPCTSTR);
	CString GetEvalCode();
	void SetEvalCode(LPCTSTR);
	long GetNetworkPollTime();
	void SetNetworkPollTime(long);

// Operations
public:
	void License();
	void NetworkLic();
	BOOL Register(LPCTSTR UnlockCode);
	BOOL Extend(LPCTSTR UnlockCode);
	BOOL Remove(LPCTSTR LicenseName, LPCTSTR EncryptionKey);
	CString CreateUnlock(LPCTSTR serialNumber, LPCTSTR key, BOOL Extend, long unlocklevel);
	void GetLicenseDetails();
	CString Transfer(LPCTSTR serialNumber);
	BOOL CreateNetFile(LPCTSTR appName, LPCTSTR uncPath, long numLicenses, LPCTSTR destinationPath);
	void Purchase();
	void AboutBox();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_SOFTLOCX6_H__45A38C80_AB4E_46DB_B8CB_2F21931A4F04__INCLUDED_)
