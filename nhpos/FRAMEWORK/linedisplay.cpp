// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "linedisplay.h"

/////////////////////////////////////////////////////////////////////////////
// CLineDisplay

IMPLEMENT_DYNCREATE(CLineDisplay, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CLineDisplay properties

CString CLineDisplay::GetCheckHealthText()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CLineDisplay::SetCheckHealthText(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

BOOL CLineDisplay::GetClaimed()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CLineDisplay::SetClaimed(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

BOOL CLineDisplay::GetDeviceEnabled()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CLineDisplay::SetDeviceEnabled(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

BOOL CLineDisplay::GetFreezeEvents()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CLineDisplay::SetFreezeEvents(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

long CLineDisplay::GetResultCode()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetResultCode(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

long CLineDisplay::GetResultCodeExtended()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetResultCodeExtended(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

long CLineDisplay::GetState()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetState(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

CString CLineDisplay::GetControlObjectDescription()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}

void CLineDisplay::SetControlObjectDescription(LPCTSTR propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}

long CLineDisplay::GetControlObjectVersion()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetControlObjectVersion(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

CString CLineDisplay::GetServiceObjectDescription()
{
	CString result;
	GetProperty(0xa, VT_BSTR, (void*)&result);
	return result;
}

void CLineDisplay::SetServiceObjectDescription(LPCTSTR propVal)
{
	SetProperty(0xa, VT_BSTR, propVal);
}

long CLineDisplay::GetServiceObjectVersion()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetServiceObjectVersion(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

CString CLineDisplay::GetDeviceDescription()
{
	CString result;
	GetProperty(0xc, VT_BSTR, (void*)&result);
	return result;
}

void CLineDisplay::SetDeviceDescription(LPCTSTR propVal)
{
	SetProperty(0xc, VT_BSTR, propVal);
}

CString CLineDisplay::GetDeviceName()
{
	CString result;
	GetProperty(0xd, VT_BSTR, (void*)&result);
	return result;
}

void CLineDisplay::SetDeviceName(LPCTSTR propVal)
{
	SetProperty(0xd, VT_BSTR, propVal);
}

long CLineDisplay::GetCapBlink()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetCapBlink(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

BOOL CLineDisplay::GetCapBrightness()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

void CLineDisplay::SetCapBrightness(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}

long CLineDisplay::GetCapCharacterSet()
{
	long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetCapCharacterSet(long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

BOOL CLineDisplay::GetCapDescriptors()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CLineDisplay::SetCapDescriptors(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

BOOL CLineDisplay::GetCapHMarquee()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}

void CLineDisplay::SetCapHMarquee(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}

BOOL CLineDisplay::GetCapICharWait()
{
	BOOL result;
	GetProperty(0x13, VT_BOOL, (void*)&result);
	return result;
}

void CLineDisplay::SetCapICharWait(BOOL propVal)
{
	SetProperty(0x13, VT_BOOL, propVal);
}

BOOL CLineDisplay::GetCapVMarquee()
{
	BOOL result;
	GetProperty(0x14, VT_BOOL, (void*)&result);
	return result;
}

void CLineDisplay::SetCapVMarquee(BOOL propVal)
{
	SetProperty(0x14, VT_BOOL, propVal);
}

long CLineDisplay::GetDeviceWindows()
{
	long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetDeviceWindows(long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}

long CLineDisplay::GetDeviceRows()
{
	long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetDeviceRows(long propVal)
{
	SetProperty(0x16, VT_I4, propVal);
}

long CLineDisplay::GetDeviceColumns()
{
	long result;
	GetProperty(0x17, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetDeviceColumns(long propVal)
{
	SetProperty(0x17, VT_I4, propVal);
}

long CLineDisplay::GetDeviceDescriptors()
{
	long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetDeviceDescriptors(long propVal)
{
	SetProperty(0x18, VT_I4, propVal);
}

long CLineDisplay::GetDeviceBrightness()
{
	long result;
	GetProperty(0x19, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetDeviceBrightness(long propVal)
{
	SetProperty(0x19, VT_I4, propVal);
}

long CLineDisplay::GetCharacterSet()
{
	long result;
	GetProperty(0x1a, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetCharacterSet(long propVal)
{
	SetProperty(0x1a, VT_I4, propVal);
}

CString CLineDisplay::GetCharacterSetList()
{
	CString result;
	GetProperty(0x1b, VT_BSTR, (void*)&result);
	return result;
}

void CLineDisplay::SetCharacterSetList(LPCTSTR propVal)
{
	SetProperty(0x1b, VT_BSTR, propVal);
}

long CLineDisplay::GetCurrentWindow()
{
	long result;
	GetProperty(0x1c, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetCurrentWindow(long propVal)
{
	SetProperty(0x1c, VT_I4, propVal);
}

long CLineDisplay::GetRows()
{
	long result;
	GetProperty(0x1d, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetRows(long propVal)
{
	SetProperty(0x1d, VT_I4, propVal);
}

long CLineDisplay::GetColumns()
{
	long result;
	GetProperty(0x1e, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetColumns(long propVal)
{
	SetProperty(0x1e, VT_I4, propVal);
}

long CLineDisplay::GetCursorRow()
{
	long result;
	GetProperty(0x1f, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetCursorRow(long propVal)
{
	SetProperty(0x1f, VT_I4, propVal);
}

long CLineDisplay::GetCursorColumn()
{
	long result;
	GetProperty(0x20, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetCursorColumn(long propVal)
{
	SetProperty(0x20, VT_I4, propVal);
}

BOOL CLineDisplay::GetCursorUpdate()
{
	BOOL result;
	GetProperty(0x21, VT_BOOL, (void*)&result);
	return result;
}

void CLineDisplay::SetCursorUpdate(BOOL propVal)
{
	SetProperty(0x21, VT_BOOL, propVal);
}

long CLineDisplay::GetMarqueeType()
{
	long result;
	GetProperty(0x22, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetMarqueeType(long propVal)
{
	SetProperty(0x22, VT_I4, propVal);
}

long CLineDisplay::GetMarqueeFormat()
{
	long result;
	GetProperty(0x23, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetMarqueeFormat(long propVal)
{
	SetProperty(0x23, VT_I4, propVal);
}

long CLineDisplay::GetMarqueeUnitWait()
{
	long result;
	GetProperty(0x24, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetMarqueeUnitWait(long propVal)
{
	SetProperty(0x24, VT_I4, propVal);
}

long CLineDisplay::GetMarqueeRepeatWait()
{
	long result;
	GetProperty(0x25, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetMarqueeRepeatWait(long propVal)
{
	SetProperty(0x25, VT_I4, propVal);
}

long CLineDisplay::GetInterCharacterWait()
{
	long result;
	GetProperty(0x26, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetInterCharacterWait(long propVal)
{
	SetProperty(0x26, VT_I4, propVal);
}

long CLineDisplay::GetBinaryConversion()
{
	long result;
	GetProperty(0x37, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetBinaryConversion(long propVal)
{
	SetProperty(0x37, VT_I4, propVal);
}

long CLineDisplay::GetCapPowerReporting()
{
	long result;
	GetProperty(0x39, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetCapPowerReporting(long propVal)
{
	SetProperty(0x39, VT_I4, propVal);
}

long CLineDisplay::GetPowerNotify()
{
	long result;
	GetProperty(0x3a, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetPowerNotify(long propVal)
{
	SetProperty(0x3a, VT_I4, propVal);
}

long CLineDisplay::GetPowerState()
{
	long result;
	GetProperty(0x3b, VT_I4, (void*)&result);
	return result;
}

void CLineDisplay::SetPowerState(long propVal)
{
	SetProperty(0x3b, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CLineDisplay operations

long CLineDisplay::Open(LPCTSTR DeviceName)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		DeviceName);
	return result;
}

long CLineDisplay::Close()
{
	long result;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CLineDisplay::Claim(long Timeout)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Timeout);
	return result;
}

long CLineDisplay::Release()
{
	long result;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CLineDisplay::CheckHealth(long Level)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Level);
	return result;
}

long CLineDisplay::DirectIO(long Command, long* pData, BSTR* pString)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_PBSTR;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Command, pData, pString);
	return result;
}

long CLineDisplay::DisplayText(LPCTSTR Data, long Attribute)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Data, Attribute);
	return result;
}

long CLineDisplay::DisplayTextAt(long Row, long Column, LPCTSTR Data, long Attribute)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR VTS_I4;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Row, Column, Data, Attribute);
	return result;
}

long CLineDisplay::ClearText()
{
	long result;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CLineDisplay::ScrollText(long Direction, long Units)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Direction, Units);
	return result;
}

long CLineDisplay::SetDescriptor(long Descriptor, long Attribute)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Descriptor, Attribute);
	return result;
}

long CLineDisplay::ClearDescriptors()
{
	long result;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CLineDisplay::CreateWin(long Row, long Column, long Height, long Width, long LogicalHeight, long LogicalWidth)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Row, Column, Height, Width, LogicalHeight, LogicalWidth);
	return result;
}

long CLineDisplay::DestroyWin()
{
	long result;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CLineDisplay::RefreshWindow(long Window)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Window);
	return result;
}

void CLineDisplay::SODirectIO(long EventNumber, long* pData, BSTR* pString)
{
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_PBSTR;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 EventNumber, pData, pString);
}

long CLineDisplay::SOProcessID()
{
	long result;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CLineDisplay::SOStatusUpdate(long Data)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Data);
}
