// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "coindispenser.h"

/////////////////////////////////////////////////////////////////////////////
// CCoinDispenser

IMPLEMENT_DYNCREATE(CCoinDispenser, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CCoinDispenser properties

CString CCoinDispenser::GetCheckHealthText()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CCoinDispenser::SetCheckHealthText(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

BOOL CCoinDispenser::GetClaimed()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CCoinDispenser::SetClaimed(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

BOOL CCoinDispenser::GetDataEventEnabled()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CCoinDispenser::SetDataEventEnabled(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

BOOL CCoinDispenser::GetDeviceEnabled()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CCoinDispenser::SetDeviceEnabled(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL CCoinDispenser::GetFreezeEvents()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CCoinDispenser::SetFreezeEvents(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

long CCoinDispenser::GetResultCode()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CCoinDispenser::SetResultCode(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

long CCoinDispenser::GetResultCodeExtended()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CCoinDispenser::SetResultCodeExtended(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

long CCoinDispenser::GetState()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CCoinDispenser::SetState(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

CString CCoinDispenser::GetControlObjectDescription()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}

void CCoinDispenser::SetControlObjectDescription(LPCTSTR propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}

long CCoinDispenser::GetControlObjectVersion()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CCoinDispenser::SetControlObjectVersion(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

CString CCoinDispenser::GetServiceObjectDescription()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CCoinDispenser::SetServiceObjectDescription(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

long CCoinDispenser::GetServiceObjectVersion()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CCoinDispenser::SetServiceObjectVersion(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

CString CCoinDispenser::GetDeviceDescription()
{
	CString result;
	GetProperty(0xd, VT_BSTR, (void*)&result);
	return result;
}

void CCoinDispenser::SetDeviceDescription(LPCTSTR propVal)
{
	SetProperty(0xd, VT_BSTR, propVal);
}

CString CCoinDispenser::GetDeviceName()
{
	CString result;
	GetProperty(0xe, VT_BSTR, (void*)&result);
	return result;
}

void CCoinDispenser::SetDeviceName(LPCTSTR propVal)
{
	SetProperty(0xe, VT_BSTR, propVal);
}

BOOL CCoinDispenser::GetCapEmptySensor()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

void CCoinDispenser::SetCapEmptySensor(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}

BOOL CCoinDispenser::GetCapJamSensor()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CCoinDispenser::SetCapJamSensor(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

BOOL CCoinDispenser::GetCapNearEmptySensor()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CCoinDispenser::SetCapNearEmptySensor(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

long CCoinDispenser::GetDispenserStatus()
{
	long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}

void CCoinDispenser::SetDispenserStatus(long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}

long CCoinDispenser::GetBinaryConversion()
{
	long result;
	GetProperty(0x44d, VT_I4, (void*)&result);
	return result;
}

void CCoinDispenser::SetBinaryConversion(long propVal)
{
	SetProperty(0x44d, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CCoinDispenser operations

long CCoinDispenser::Open(LPCTSTR DeviceName)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		DeviceName);
	return result;
}

long CCoinDispenser::Close()
{
	long result;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CCoinDispenser::Claim(long Timeout)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Timeout);
	return result;
}

long CCoinDispenser::Release()
{
	long result;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CCoinDispenser::CheckHealth(long Level)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Level);
	return result;
}

void CCoinDispenser::SOStatusUpdate(long Data)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Data);
}

long CCoinDispenser::DispenseChange(long Amount)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Amount);
	return result;
}

long CCoinDispenser::DirectIO(long Command, long* pData, BSTR* pString)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_PBSTR;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Command, pData, pString);
	return result;
}

void CCoinDispenser::SODirectIO(long EventNumber, long* pData, BSTR* pString)
{
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_PBSTR;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 EventNumber, pData, pString);
}

void CCoinDispenser::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
