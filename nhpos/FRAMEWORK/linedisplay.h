#if !defined(AFX_LINEDISPLAY_H__D199D7F1_A28F_4EE4_9100_473BED99D97B__INCLUDED_)
#define AFX_LINEDISPLAY_H__D199D7F1_A28F_4EE4_9100_473BED99D97B__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CLineDisplay wrapper class

class CLineDisplay : public CWnd
{
protected:
	DECLARE_DYNCREATE(CLineDisplay)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x4559cc03, 0x36bf, 0x11cf, { 0x88, 0xf3, 0x2, 0x60, 0x8c, 0xa3, 0xbe, 0x43 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	CString GetCheckHealthText();
	void SetCheckHealthText(LPCTSTR);
	BOOL GetClaimed();
	void SetClaimed(BOOL);
	BOOL GetDeviceEnabled();
	void SetDeviceEnabled(BOOL);
	BOOL GetFreezeEvents();
	void SetFreezeEvents(BOOL);
	long GetResultCode();
	void SetResultCode(long);
	long GetResultCodeExtended();
	void SetResultCodeExtended(long);
	long GetState();
	void SetState(long);
	CString GetControlObjectDescription();
	void SetControlObjectDescription(LPCTSTR);
	long GetControlObjectVersion();
	void SetControlObjectVersion(long);
	CString GetServiceObjectDescription();
	void SetServiceObjectDescription(LPCTSTR);
	long GetServiceObjectVersion();
	void SetServiceObjectVersion(long);
	CString GetDeviceDescription();
	void SetDeviceDescription(LPCTSTR);
	CString GetDeviceName();
	void SetDeviceName(LPCTSTR);
	long GetCapBlink();
	void SetCapBlink(long);
	BOOL GetCapBrightness();
	void SetCapBrightness(BOOL);
	long GetCapCharacterSet();
	void SetCapCharacterSet(long);
	BOOL GetCapDescriptors();
	void SetCapDescriptors(BOOL);
	BOOL GetCapHMarquee();
	void SetCapHMarquee(BOOL);
	BOOL GetCapICharWait();
	void SetCapICharWait(BOOL);
	BOOL GetCapVMarquee();
	void SetCapVMarquee(BOOL);
	long GetDeviceWindows();
	void SetDeviceWindows(long);
	long GetDeviceRows();
	void SetDeviceRows(long);
	long GetDeviceColumns();
	void SetDeviceColumns(long);
	long GetDeviceDescriptors();
	void SetDeviceDescriptors(long);
	long GetDeviceBrightness();
	void SetDeviceBrightness(long);
	long GetCharacterSet();
	void SetCharacterSet(long);
	CString GetCharacterSetList();
	void SetCharacterSetList(LPCTSTR);
	long GetCurrentWindow();
	void SetCurrentWindow(long);
	long GetRows();
	void SetRows(long);
	long GetColumns();
	void SetColumns(long);
	long GetCursorRow();
	void SetCursorRow(long);
	long GetCursorColumn();
	void SetCursorColumn(long);
	BOOL GetCursorUpdate();
	void SetCursorUpdate(BOOL);
	long GetMarqueeType();
	void SetMarqueeType(long);
	long GetMarqueeFormat();
	void SetMarqueeFormat(long);
	long GetMarqueeUnitWait();
	void SetMarqueeUnitWait(long);
	long GetMarqueeRepeatWait();
	void SetMarqueeRepeatWait(long);
	long GetInterCharacterWait();
	void SetInterCharacterWait(long);
	long GetBinaryConversion();
	void SetBinaryConversion(long);
	long GetCapPowerReporting();
	void SetCapPowerReporting(long);
	long GetPowerNotify();
	void SetPowerNotify(long);
	long GetPowerState();
	void SetPowerState(long);

// Operations
public:
	long Open(LPCTSTR DeviceName);
	long Close();
	long Claim(long Timeout);
	long Release();
	long CheckHealth(long Level);
	long DirectIO(long Command, long* pData, BSTR* pString);
	long DisplayText(LPCTSTR Data, long Attribute);
	long DisplayTextAt(long Row, long Column, LPCTSTR Data, long Attribute);
	long ClearText();
	long ScrollText(long Direction, long Units);
	long SetDescriptor(long Descriptor, long Attribute);
	long ClearDescriptors();
	long CreateWin(long Row, long Column, long Height, long Width, long LogicalHeight, long LogicalWidth);
	long DestroyWin();
	long RefreshWindow(long Window);
	void SODirectIO(long EventNumber, long* pData, BSTR* pString);
	long SOProcessID();
	void SOStatusUpdate(long Data);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_LINEDISPLAY_H__D199D7F1_A28F_4EE4_9100_473BED99D97B__INCLUDED_)
